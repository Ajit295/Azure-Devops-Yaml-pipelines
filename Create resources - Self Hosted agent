# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
trigger:
- none

pool:
  name: Terraform Agent
  demands:
   - agent.name -equals Terraform server

# Fetch provider variables from Variable group
#variables:
#- group: TerraformCredentials

stages:

  # stage to validate terrafrom code before deploy resources
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:  
         
          # Install Terraform on Hosted agent
          - task: TerraformInstaller@1
            displayName: Terraform install
            inputs:
              terraformVersion: 'latest'

          # Export provider variables as Environment variable in yaml pipeline using script task
          #- script: |
              #echo "Setting Terraform environment variables..."
              #export ARM_CLIENT_ID=$(client_id)
              #export ARM_CLIENT_SECRET=$(client_secret)
              #export ARM_SUBSCRIPTION_ID=$(subscription_id)
            #displayName: 'Set Terraform Environment Variables'

          # Initaite terraform to install provider files and dependencies 
          # Also defined backed Azure storge accouunt to store terraform.state file to manage centrally
          - task: TerraformTaskV4@4
            displayName: Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Azure-connect'
              backendAzureRmResourceGroupName: 'Ajit-RG'
              backendAzureRmStorageAccountName: 'storgeaccount23091998343'
              backendAzureRmContainerName: 'self-hosted-terraform-state'
              backendAzureRmKey: 'terraform.tfstate'
              
          # Validate the terraform HCL files for syntex error 
          - task: TerraformTaskV4@4
            displayName: Validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  
# Stage to deploy resources based on condition of above state completed succefully 
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps: 
            
          # Export provider variables as Environment variable in yaml pipeline using script task
           #- script: |
              #echo "Setting Terraform environment variables..."
              #export ARM_CLIENT_ID=$(client_id)
              #export ARM_CLIENT_SECRET=$(client_secret)
              #export ARM_SUBSCRIPTION_ID=$(subscription_id)
              #export ARM_TENANT_ID=$(tenant_id)
            # displayName: 'Set Terraform Environment Variables'

          # Initaite terraform to install provider files and dependencies 
          # Also defined backed Azure storge accouunt to store terraform.state file to manage centrally
           - task: TerraformTaskV4@4
             displayName: Init
             inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'Azure-connect'
              backendAzureRmResourceGroupName: 'Ajit-RG'
              backendAzureRmStorageAccountName: 'storgeaccount23091998343'
              backendAzureRmContainerName: 'self-hosted-terraform-state'
              backendAzureRmKey: 'terraform.tfstate'

          # Create plan of the resources to be created
           - task: TerraformTaskV4@4
             displayName: Plan
             inputs:
               provider: 'azurerm'
               command: 'plan'
               environmentServiceNameAzureRM: 'Azure-connect'
               commandOptions: '-input=false'   # To stop the default behaviour of terraform to wait for user input

          # Apply task to create terraform resource
           - task: TerraformTaskV4@4
             displayName: Apply
             inputs:
               provider: 'azurerm'
               command: 'apply'
               environmentServiceNameAzureRM: 'Azure-connect'
